// Code generated by MockGen. DO NOT EDIT.
// Source: ./uncompressor.go

// Package uncompressor is a generated GoMock package.
package uncompressor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUncompressor is a mock of Uncompressor interface.
type MockUncompressor struct {
	ctrl     *gomock.Controller
	recorder *MockUncompressorMockRecorder
}

// MockUncompressorMockRecorder is the mock recorder for MockUncompressor.
type MockUncompressorMockRecorder struct {
	mock *MockUncompressor
}

// NewMockUncompressor creates a new mock instance.
func NewMockUncompressor(ctrl *gomock.Controller) *MockUncompressor {
	mock := &MockUncompressor{ctrl: ctrl}
	mock.recorder = &MockUncompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUncompressor) EXPECT() *MockUncompressorMockRecorder {
	return m.recorder
}

// UncompressFromUrl mocks base method.
func (m *MockUncompressor) UncompressFromUrl(url, directoryName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UncompressFromUrl", url, directoryName)
}

// UncompressFromUrl indicates an expected call of UncompressFromUrl.
func (mr *MockUncompressorMockRecorder) UncompressFromUrl(url, directoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncompressFromUrl", reflect.TypeOf((*MockUncompressor)(nil).UncompressFromUrl), url, directoryName)
}
