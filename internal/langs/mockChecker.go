// Code generated by MockGen. DO NOT EDIT.
// Source: ./checker.go

// Package langs is a generated GoMock package.
package langs

import (
	reflect "reflect"

	logger "github.com/denizgursoy/gotouch/internal/logger"
	store "github.com/denizgursoy/gotouch/internal/store"
	gomock "github.com/golang/mock/gomock"
)

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// GetLangChecker mocks base method.
func (m *MockChecker) GetLangChecker() LanguageChecker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLangChecker")
	ret0, _ := ret[0].(LanguageChecker)
	return ret0
}

// GetLangChecker indicates an expected call of GetLangChecker.
func (mr *MockCheckerMockRecorder) GetLangChecker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLangChecker", reflect.TypeOf((*MockChecker)(nil).GetLangChecker))
}

// Init mocks base method.
func (m *MockChecker) Init(language string, Logger logger.Logger, str store.Store) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", language, Logger, str)
}

// Init indicates an expected call of Init.
func (mr *MockCheckerMockRecorder) Init(language, Logger, str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockChecker)(nil).Init), language, Logger, str)
}

// MockLanguageChecker is a mock of LanguageChecker interface.
type MockLanguageChecker struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageCheckerMockRecorder
}

// MockLanguageCheckerMockRecorder is the mock recorder for MockLanguageChecker.
type MockLanguageCheckerMockRecorder struct {
	mock *MockLanguageChecker
}

// NewMockLanguageChecker creates a new mock instance.
func NewMockLanguageChecker(ctrl *gomock.Controller) *MockLanguageChecker {
	mock := &MockLanguageChecker{ctrl: ctrl}
	mock.recorder = &MockLanguageCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageChecker) EXPECT() *MockLanguageCheckerMockRecorder {
	return m.recorder
}

// CheckDependency mocks base method.
func (m *MockLanguageChecker) CheckDependency(dependency interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDependency", dependency)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDependency indicates an expected call of CheckDependency.
func (mr *MockLanguageCheckerMockRecorder) CheckDependency(dependency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDependency", reflect.TypeOf((*MockLanguageChecker)(nil).CheckDependency), dependency)
}

// CheckSetup mocks base method.
func (m *MockLanguageChecker) CheckSetup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSetup")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSetup indicates an expected call of CheckSetup.
func (mr *MockLanguageCheckerMockRecorder) CheckSetup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSetup", reflect.TypeOf((*MockLanguageChecker)(nil).CheckSetup))
}

// CompletePreTask mocks base method.
func (m *MockLanguageChecker) CompletePreTask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletePreTask")
	ret0, _ := ret[0].(error)
	return ret0
}

// CompletePreTask indicates an expected call of CompletePreTask.
func (mr *MockLanguageCheckerMockRecorder) CompletePreTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePreTask", reflect.TypeOf((*MockLanguageChecker)(nil).CompletePreTask))
}

// GetDependency mocks base method.
func (m *MockLanguageChecker) GetDependency(dependency interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependency", dependency)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDependency indicates an expected call of GetDependency.
func (mr *MockLanguageCheckerMockRecorder) GetDependency(dependency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependency", reflect.TypeOf((*MockLanguageChecker)(nil).GetDependency), dependency)
}
