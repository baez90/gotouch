// Code generated by MockGen. DO NOT EDIT.
// Source: ./compressor.go

// Package compressor is a generated GoMock package.
package compressor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompressor is a mock of Compressor interface.
type MockCompressor struct {
	ctrl     *gomock.Controller
	recorder *MockCompressorMockRecorder
}

// MockCompressorMockRecorder is the mock recorder for MockCompressor.
type MockCompressorMockRecorder struct {
	mock *MockCompressor
}

// NewMockCompressor creates a new mock instance.
func NewMockCompressor(ctrl *gomock.Controller) *MockCompressor {
	mock := &MockCompressor{ctrl: ctrl}
	mock.recorder = &MockCompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompressor) EXPECT() *MockCompressorMockRecorder {
	return m.recorder
}

// UncompressFromUrl mocks base method.
func (m *MockCompressor) UncompressFromUrl(url, directoryName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UncompressFromUrl", url, directoryName)
}

// UncompressFromUrl indicates an expected call of UncompressFromUrl.
func (mr *MockCompressorMockRecorder) UncompressFromUrl(url, directoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncompressFromUrl", reflect.TypeOf((*MockCompressor)(nil).UncompressFromUrl), url, directoryName)
}
