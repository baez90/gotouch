// Code generated by MockGen. DO NOT EDIT.
// Source: ./logger.go

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// LogErrorIfExists mocks base method.
func (m *MockLogger) LogErrorIfExists(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogErrorIfExists", err)
}

// LogErrorIfExists indicates an expected call of LogErrorIfExists.
func (mr *MockLoggerMockRecorder) LogErrorIfExists(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogErrorIfExists", reflect.TypeOf((*MockLogger)(nil).LogErrorIfExists), err)
}

// LogInfo mocks base method.
func (m *MockLogger) LogInfo(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", msg)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockLoggerMockRecorder) LogInfo(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockLogger)(nil).LogInfo), msg)
}
